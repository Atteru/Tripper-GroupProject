#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tripper.DbLogic.LinqToSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TripperDB")]
	public partial class TripperDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContinent(Continent instance);
    partial void UpdateContinent(Continent instance);
    partial void DeleteContinent(Continent instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertLocalization(Localization instance);
    partial void UpdateLocalization(Localization instance);
    partial void DeleteLocalization(Localization instance);
    partial void InsertOtherCost(OtherCost instance);
    partial void UpdateOtherCost(OtherCost instance);
    partial void DeleteOtherCost(OtherCost instance);
    partial void InsertOtherCostsCatergory(OtherCostsCatergory instance);
    partial void UpdateOtherCostsCatergory(OtherCostsCatergory instance);
    partial void DeleteOtherCostsCatergory(OtherCostsCatergory instance);
    partial void InsertStayment(Stayment instance);
    partial void UpdateStayment(Stayment instance);
    partial void DeleteStayment(Stayment instance);
    partial void InsertTransport(Transport instance);
    partial void UpdateTransport(Transport instance);
    partial void DeleteTransport(Transport instance);
    partial void InsertTrip(Trip instance);
    partial void UpdateTrip(Trip instance);
    partial void DeleteTrip(Trip instance);
    #endregion
		
		public TripperDataDataContext() : 
				base(global::Tripper.Properties.Settings.Default.TripperDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TripperDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TripperDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TripperDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TripperDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Continent> Continents
		{
			get
			{
				return this.GetTable<Continent>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Localization> Localizations
		{
			get
			{
				return this.GetTable<Localization>();
			}
		}
		
		public System.Data.Linq.Table<OtherCost> OtherCosts
		{
			get
			{
				return this.GetTable<OtherCost>();
			}
		}
		
		public System.Data.Linq.Table<OtherCostsCatergory> OtherCostsCatergories
		{
			get
			{
				return this.GetTable<OtherCostsCatergory>();
			}
		}
		
		public System.Data.Linq.Table<Stayment> Stayments
		{
			get
			{
				return this.GetTable<Stayment>();
			}
		}
		
		public System.Data.Linq.Table<Transport> Transports
		{
			get
			{
				return this.GetTable<Transport>();
			}
		}
		
		public System.Data.Linq.Table<Trip> Trips
		{
			get
			{
				return this.GetTable<Trip>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Continent")]
	public partial class Continent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _continentID;
		
		private string _Name;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontinentIDChanging(int value);
    partial void OncontinentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Continent()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_continentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int continentID
		{
			get
			{
				return this._continentID;
			}
			set
			{
				if ((this._continentID != value))
				{
					this.OncontinentIDChanging(value);
					this.SendPropertyChanging();
					this._continentID = value;
					this.SendPropertyChanged("continentID");
					this.OncontinentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Continent_Country", Storage="_Countries", ThisKey="continentID", OtherKey="ContinentID")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Continent = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Continent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Login;
		
		private string _Password;
		
		private EntitySet<Trip> _Trips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Trip", Storage="_Trips", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryID;
		
		private string _Name;
		
		private int _ContinentID;
		
		private EntitySet<Localization> _Localizations;
		
		private EntityRef<Continent> _Continent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(string value);
    partial void OnCountryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContinentIDChanging(int value);
    partial void OnContinentIDChanged();
    #endregion
		
		public Country()
		{
			this._Localizations = new EntitySet<Localization>(new Action<Localization>(this.attach_Localizations), new Action<Localization>(this.detach_Localizations));
			this._Continent = default(EntityRef<Continent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Char(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContinentID", DbType="Int NOT NULL")]
		public int ContinentID
		{
			get
			{
				return this._ContinentID;
			}
			set
			{
				if ((this._ContinentID != value))
				{
					if (this._Continent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContinentIDChanging(value);
					this.SendPropertyChanging();
					this._ContinentID = value;
					this.SendPropertyChanged("ContinentID");
					this.OnContinentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Localization", Storage="_Localizations", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Localization> Localizations
		{
			get
			{
				return this._Localizations;
			}
			set
			{
				this._Localizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Continent_Country", Storage="_Continent", ThisKey="ContinentID", OtherKey="continentID", IsForeignKey=true)]
		public Continent Continent
		{
			get
			{
				return this._Continent.Entity;
			}
			set
			{
				Continent previousValue = this._Continent.Entity;
				if (((previousValue != value) 
							|| (this._Continent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Continent.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Continent.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._ContinentID = value.continentID;
					}
					else
					{
						this._ContinentID = default(int);
					}
					this.SendPropertyChanged("Continent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Localizations(Localization entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Localizations(Localization entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Localization")]
	public partial class Localization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocalizationID;
		
		private string _City;
		
		private string _CountryID;
		
		private EntitySet<Stayment> _Stayments;
		
		private EntitySet<Transport> _Transports;
		
		private EntitySet<Transport> _Transports1;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocalizationIDChanging(int value);
    partial void OnLocalizationIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryIDChanging(string value);
    partial void OnCountryIDChanged();
    #endregion
		
		public Localization()
		{
			this._Stayments = new EntitySet<Stayment>(new Action<Stayment>(this.attach_Stayments), new Action<Stayment>(this.detach_Stayments));
			this._Transports = new EntitySet<Transport>(new Action<Transport>(this.attach_Transports), new Action<Transport>(this.detach_Transports));
			this._Transports1 = new EntitySet<Transport>(new Action<Transport>(this.attach_Transports1), new Action<Transport>(this.detach_Transports1));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalizationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocalizationID
		{
			get
			{
				return this._LocalizationID;
			}
			set
			{
				if ((this._LocalizationID != value))
				{
					this.OnLocalizationIDChanging(value);
					this.SendPropertyChanging();
					this._LocalizationID = value;
					this.SendPropertyChanged("LocalizationID");
					this.OnLocalizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localization_Stayment", Storage="_Stayments", ThisKey="LocalizationID", OtherKey="LocalizationID")]
		public EntitySet<Stayment> Stayments
		{
			get
			{
				return this._Stayments;
			}
			set
			{
				this._Stayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localization_Transport", Storage="_Transports", ThisKey="LocalizationID", OtherKey="ArrivalLocalization")]
		public EntitySet<Transport> Transports
		{
			get
			{
				return this._Transports;
			}
			set
			{
				this._Transports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localization_Transport1", Storage="_Transports1", ThisKey="LocalizationID", OtherKey="DepartureLocalization")]
		public EntitySet<Transport> Transports1
		{
			get
			{
				return this._Transports1;
			}
			set
			{
				this._Transports1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Localization", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Localizations.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Localizations.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stayments(Stayment entity)
		{
			this.SendPropertyChanging();
			entity.Localization = this;
		}
		
		private void detach_Stayments(Stayment entity)
		{
			this.SendPropertyChanging();
			entity.Localization = null;
		}
		
		private void attach_Transports(Transport entity)
		{
			this.SendPropertyChanging();
			entity.Localization = this;
		}
		
		private void detach_Transports(Transport entity)
		{
			this.SendPropertyChanging();
			entity.Localization = null;
		}
		
		private void attach_Transports1(Transport entity)
		{
			this.SendPropertyChanging();
			entity.Localization1 = this;
		}
		
		private void detach_Transports1(Transport entity)
		{
			this.SendPropertyChanging();
			entity.Localization1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherCosts")]
	public partial class OtherCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OtherCostsID;
		
		private int _OtherCategoryID;
		
		private int _TripID;
		
		private decimal _Cost;
		
		private EntityRef<OtherCostsCatergory> _OtherCostsCatergory;
		
		private EntityRef<Trip> _Trip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOtherCostsIDChanging(int value);
    partial void OnOtherCostsIDChanged();
    partial void OnOtherCategoryIDChanging(int value);
    partial void OnOtherCategoryIDChanged();
    partial void OnTripIDChanging(int value);
    partial void OnTripIDChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    #endregion
		
		public OtherCost()
		{
			this._OtherCostsCatergory = default(EntityRef<OtherCostsCatergory>);
			this._Trip = default(EntityRef<Trip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherCostsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OtherCostsID
		{
			get
			{
				return this._OtherCostsID;
			}
			set
			{
				if ((this._OtherCostsID != value))
				{
					this.OnOtherCostsIDChanging(value);
					this.SendPropertyChanging();
					this._OtherCostsID = value;
					this.SendPropertyChanged("OtherCostsID");
					this.OnOtherCostsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherCategoryID", DbType="Int NOT NULL")]
		public int OtherCategoryID
		{
			get
			{
				return this._OtherCategoryID;
			}
			set
			{
				if ((this._OtherCategoryID != value))
				{
					if (this._OtherCostsCatergory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOtherCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._OtherCategoryID = value;
					this.SendPropertyChanged("OtherCategoryID");
					this.OnOtherCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripID", DbType="Int NOT NULL")]
		public int TripID
		{
			get
			{
				return this._TripID;
			}
			set
			{
				if ((this._TripID != value))
				{
					if (this._Trip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTripIDChanging(value);
					this.SendPropertyChanging();
					this._TripID = value;
					this.SendPropertyChanged("TripID");
					this.OnTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(10,2) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OtherCostsCatergory_OtherCost", Storage="_OtherCostsCatergory", ThisKey="OtherCategoryID", OtherKey="OtherCategoryID", IsForeignKey=true)]
		public OtherCostsCatergory OtherCostsCatergory
		{
			get
			{
				return this._OtherCostsCatergory.Entity;
			}
			set
			{
				OtherCostsCatergory previousValue = this._OtherCostsCatergory.Entity;
				if (((previousValue != value) 
							|| (this._OtherCostsCatergory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OtherCostsCatergory.Entity = null;
						previousValue.OtherCosts.Remove(this);
					}
					this._OtherCostsCatergory.Entity = value;
					if ((value != null))
					{
						value.OtherCosts.Add(this);
						this._OtherCategoryID = value.OtherCategoryID;
					}
					else
					{
						this._OtherCategoryID = default(int);
					}
					this.SendPropertyChanged("OtherCostsCatergory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_OtherCost", Storage="_Trip", ThisKey="TripID", OtherKey="TripID", IsForeignKey=true)]
		public Trip Trip
		{
			get
			{
				return this._Trip.Entity;
			}
			set
			{
				Trip previousValue = this._Trip.Entity;
				if (((previousValue != value) 
							|| (this._Trip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trip.Entity = null;
						previousValue.OtherCosts.Remove(this);
					}
					this._Trip.Entity = value;
					if ((value != null))
					{
						value.OtherCosts.Add(this);
						this._TripID = value.TripID;
					}
					else
					{
						this._TripID = default(int);
					}
					this.SendPropertyChanged("Trip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherCostsCatergory")]
	public partial class OtherCostsCatergory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OtherCategoryID;
		
		private string _OtherCategoryName;
		
		private EntitySet<OtherCost> _OtherCosts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOtherCategoryIDChanging(int value);
    partial void OnOtherCategoryIDChanged();
    partial void OnOtherCategoryNameChanging(string value);
    partial void OnOtherCategoryNameChanged();
    #endregion
		
		public OtherCostsCatergory()
		{
			this._OtherCosts = new EntitySet<OtherCost>(new Action<OtherCost>(this.attach_OtherCosts), new Action<OtherCost>(this.detach_OtherCosts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OtherCategoryID
		{
			get
			{
				return this._OtherCategoryID;
			}
			set
			{
				if ((this._OtherCategoryID != value))
				{
					this.OnOtherCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._OtherCategoryID = value;
					this.SendPropertyChanged("OtherCategoryID");
					this.OnOtherCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherCategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OtherCategoryName
		{
			get
			{
				return this._OtherCategoryName;
			}
			set
			{
				if ((this._OtherCategoryName != value))
				{
					this.OnOtherCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._OtherCategoryName = value;
					this.SendPropertyChanged("OtherCategoryName");
					this.OnOtherCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OtherCostsCatergory_OtherCost", Storage="_OtherCosts", ThisKey="OtherCategoryID", OtherKey="OtherCategoryID")]
		public EntitySet<OtherCost> OtherCosts
		{
			get
			{
				return this._OtherCosts;
			}
			set
			{
				this._OtherCosts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OtherCosts(OtherCost entity)
		{
			this.SendPropertyChanging();
			entity.OtherCostsCatergory = this;
		}
		
		private void detach_OtherCosts(OtherCost entity)
		{
			this.SendPropertyChanging();
			entity.OtherCostsCatergory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stayment")]
	public partial class Stayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaymentID;
		
		private string _Address;
		
		private System.DateTime _DateFrom;
		
		private System.DateTime _DateTo;
		
		private int _TripID;
		
		private int _LocalizationID;
		
		private decimal _Cost;
		
		private System.DateTime _ModifiedDate;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<Localization> _Localization;
		
		private EntityRef<Trip> _Trip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaymentIDChanging(int value);
    partial void OnStaymentIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDateFromChanging(System.DateTime value);
    partial void OnDateFromChanged();
    partial void OnDateToChanging(System.DateTime value);
    partial void OnDateToChanged();
    partial void OnTripIDChanging(int value);
    partial void OnTripIDChanged();
    partial void OnLocalizationIDChanging(int value);
    partial void OnLocalizationIDChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Stayment()
		{
			this._Localization = default(EntityRef<Localization>);
			this._Trip = default(EntityRef<Trip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaymentID
		{
			get
			{
				return this._StaymentID;
			}
			set
			{
				if ((this._StaymentID != value))
				{
					this.OnStaymentIDChanging(value);
					this.SendPropertyChanging();
					this._StaymentID = value;
					this.SendPropertyChanged("StaymentID");
					this.OnStaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFrom", DbType="DateTime NOT NULL")]
		public System.DateTime DateFrom
		{
			get
			{
				return this._DateFrom;
			}
			set
			{
				if ((this._DateFrom != value))
				{
					this.OnDateFromChanging(value);
					this.SendPropertyChanging();
					this._DateFrom = value;
					this.SendPropertyChanged("DateFrom");
					this.OnDateFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTo", DbType="DateTime NOT NULL")]
		public System.DateTime DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripID", DbType="Int NOT NULL")]
		public int TripID
		{
			get
			{
				return this._TripID;
			}
			set
			{
				if ((this._TripID != value))
				{
					if (this._Trip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTripIDChanging(value);
					this.SendPropertyChanging();
					this._TripID = value;
					this.SendPropertyChanged("TripID");
					this.OnTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalizationID", DbType="Int NOT NULL")]
		public int LocalizationID
		{
			get
			{
				return this._LocalizationID;
			}
			set
			{
				if ((this._LocalizationID != value))
				{
					if (this._Localization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocalizationIDChanging(value);
					this.SendPropertyChanging();
					this._LocalizationID = value;
					this.SendPropertyChanged("LocalizationID");
					this.OnLocalizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(10,2) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localization_Stayment", Storage="_Localization", ThisKey="LocalizationID", OtherKey="LocalizationID", IsForeignKey=true)]
		public Localization Localization
		{
			get
			{
				return this._Localization.Entity;
			}
			set
			{
				Localization previousValue = this._Localization.Entity;
				if (((previousValue != value) 
							|| (this._Localization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Localization.Entity = null;
						previousValue.Stayments.Remove(this);
					}
					this._Localization.Entity = value;
					if ((value != null))
					{
						value.Stayments.Add(this);
						this._LocalizationID = value.LocalizationID;
					}
					else
					{
						this._LocalizationID = default(int);
					}
					this.SendPropertyChanged("Localization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Stayment", Storage="_Trip", ThisKey="TripID", OtherKey="TripID", IsForeignKey=true)]
		public Trip Trip
		{
			get
			{
				return this._Trip.Entity;
			}
			set
			{
				Trip previousValue = this._Trip.Entity;
				if (((previousValue != value) 
							|| (this._Trip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trip.Entity = null;
						previousValue.Stayments.Remove(this);
					}
					this._Trip.Entity = value;
					if ((value != null))
					{
						value.Stayments.Add(this);
						this._TripID = value.TripID;
					}
					else
					{
						this._TripID = default(int);
					}
					this.SendPropertyChanged("Trip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transport")]
	public partial class Transport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransportID;
		
		private string _Vehicle;
		
		private decimal _Cost;
		
		private bool _IsReturn;
		
		private int _TripID;
		
		private string _Seats;
		
		private System.Nullable<System.DateTime> _DepartureTime;
		
		private System.Nullable<System.DateTime> _ArrivalTime;
		
		private int _DepartureLocalization;
		
		private int _ArrivalLocalization;
		
		private System.DateTime _ModifiedDate;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<Localization> _Localization;
		
		private EntityRef<Localization> _Localization1;
		
		private EntityRef<Trip> _Trip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransportIDChanging(int value);
    partial void OnTransportIDChanged();
    partial void OnVehicleChanging(string value);
    partial void OnVehicleChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnIsReturnChanging(bool value);
    partial void OnIsReturnChanged();
    partial void OnTripIDChanging(int value);
    partial void OnTripIDChanged();
    partial void OnSeatsChanging(string value);
    partial void OnSeatsChanged();
    partial void OnDepartureTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDepartureTimeChanged();
    partial void OnArrivalTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnArrivalTimeChanged();
    partial void OnDepartureLocalizationChanging(int value);
    partial void OnDepartureLocalizationChanged();
    partial void OnArrivalLocalizationChanging(int value);
    partial void OnArrivalLocalizationChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Transport()
		{
			this._Localization = default(EntityRef<Localization>);
			this._Localization1 = default(EntityRef<Localization>);
			this._Trip = default(EntityRef<Trip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransportID
		{
			get
			{
				return this._TransportID;
			}
			set
			{
				if ((this._TransportID != value))
				{
					this.OnTransportIDChanging(value);
					this.SendPropertyChanging();
					this._TransportID = value;
					this.SendPropertyChanged("TransportID");
					this.OnTransportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vehicle", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Vehicle
		{
			get
			{
				return this._Vehicle;
			}
			set
			{
				if ((this._Vehicle != value))
				{
					this.OnVehicleChanging(value);
					this.SendPropertyChanging();
					this._Vehicle = value;
					this.SendPropertyChanged("Vehicle");
					this.OnVehicleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(10,2) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReturn", DbType="Bit NOT NULL")]
		public bool IsReturn
		{
			get
			{
				return this._IsReturn;
			}
			set
			{
				if ((this._IsReturn != value))
				{
					this.OnIsReturnChanging(value);
					this.SendPropertyChanging();
					this._IsReturn = value;
					this.SendPropertyChanged("IsReturn");
					this.OnIsReturnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripID", DbType="Int NOT NULL")]
		public int TripID
		{
			get
			{
				return this._TripID;
			}
			set
			{
				if ((this._TripID != value))
				{
					if (this._Trip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTripIDChanging(value);
					this.SendPropertyChanging();
					this._TripID = value;
					this.SendPropertyChanged("TripID");
					this.OnTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seats", DbType="NVarChar(10)")]
		public string Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				if ((this._Seats != value))
				{
					this.OnSeatsChanging(value);
					this.SendPropertyChanging();
					this._Seats = value;
					this.SendPropertyChanged("Seats");
					this.OnSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartureTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DepartureTime
		{
			get
			{
				return this._DepartureTime;
			}
			set
			{
				if ((this._DepartureTime != value))
				{
					this.OnDepartureTimeChanging(value);
					this.SendPropertyChanging();
					this._DepartureTime = value;
					this.SendPropertyChanged("DepartureTime");
					this.OnDepartureTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ArrivalTime
		{
			get
			{
				return this._ArrivalTime;
			}
			set
			{
				if ((this._ArrivalTime != value))
				{
					this.OnArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTime = value;
					this.SendPropertyChanged("ArrivalTime");
					this.OnArrivalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartureLocalization", DbType="Int NOT NULL")]
		public int DepartureLocalization
		{
			get
			{
				return this._DepartureLocalization;
			}
			set
			{
				if ((this._DepartureLocalization != value))
				{
					if (this._Localization1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartureLocalizationChanging(value);
					this.SendPropertyChanging();
					this._DepartureLocalization = value;
					this.SendPropertyChanged("DepartureLocalization");
					this.OnDepartureLocalizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalLocalization", DbType="Int NOT NULL")]
		public int ArrivalLocalization
		{
			get
			{
				return this._ArrivalLocalization;
			}
			set
			{
				if ((this._ArrivalLocalization != value))
				{
					if (this._Localization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArrivalLocalizationChanging(value);
					this.SendPropertyChanging();
					this._ArrivalLocalization = value;
					this.SendPropertyChanged("ArrivalLocalization");
					this.OnArrivalLocalizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localization_Transport", Storage="_Localization", ThisKey="ArrivalLocalization", OtherKey="LocalizationID", IsForeignKey=true)]
		public Localization Localization
		{
			get
			{
				return this._Localization.Entity;
			}
			set
			{
				Localization previousValue = this._Localization.Entity;
				if (((previousValue != value) 
							|| (this._Localization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Localization.Entity = null;
						previousValue.Transports.Remove(this);
					}
					this._Localization.Entity = value;
					if ((value != null))
					{
						value.Transports.Add(this);
						this._ArrivalLocalization = value.LocalizationID;
					}
					else
					{
						this._ArrivalLocalization = default(int);
					}
					this.SendPropertyChanged("Localization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localization_Transport1", Storage="_Localization1", ThisKey="DepartureLocalization", OtherKey="LocalizationID", IsForeignKey=true)]
		public Localization Localization1
		{
			get
			{
				return this._Localization1.Entity;
			}
			set
			{
				Localization previousValue = this._Localization1.Entity;
				if (((previousValue != value) 
							|| (this._Localization1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Localization1.Entity = null;
						previousValue.Transports1.Remove(this);
					}
					this._Localization1.Entity = value;
					if ((value != null))
					{
						value.Transports1.Add(this);
						this._DepartureLocalization = value.LocalizationID;
					}
					else
					{
						this._DepartureLocalization = default(int);
					}
					this.SendPropertyChanged("Localization1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Transport", Storage="_Trip", ThisKey="TripID", OtherKey="TripID", IsForeignKey=true)]
		public Trip Trip
		{
			get
			{
				return this._Trip.Entity;
			}
			set
			{
				Trip previousValue = this._Trip.Entity;
				if (((previousValue != value) 
							|| (this._Trip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trip.Entity = null;
						previousValue.Transports.Remove(this);
					}
					this._Trip.Entity = value;
					if ((value != null))
					{
						value.Transports.Add(this);
						this._TripID = value.TripID;
					}
					else
					{
						this._TripID = default(int);
					}
					this.SendPropertyChanged("Trip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trip")]
	public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TripID;
		
		private string _Name;
		
		private int _UserID;
		
		private decimal _Budget;
		
		private System.DateTime _ModifiedDate;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<OtherCost> _OtherCosts;
		
		private EntitySet<Stayment> _Stayments;
		
		private EntitySet<Transport> _Transports;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTripIDChanging(int value);
    partial void OnTripIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnBudgetChanging(decimal value);
    partial void OnBudgetChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Trip()
		{
			this._OtherCosts = new EntitySet<OtherCost>(new Action<OtherCost>(this.attach_OtherCosts), new Action<OtherCost>(this.detach_OtherCosts));
			this._Stayments = new EntitySet<Stayment>(new Action<Stayment>(this.attach_Stayments), new Action<Stayment>(this.detach_Stayments));
			this._Transports = new EntitySet<Transport>(new Action<Transport>(this.attach_Transports), new Action<Transport>(this.detach_Transports));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TripID
		{
			get
			{
				return this._TripID;
			}
			set
			{
				if ((this._TripID != value))
				{
					this.OnTripIDChanging(value);
					this.SendPropertyChanging();
					this._TripID = value;
					this.SendPropertyChanged("TripID");
					this.OnTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Budget", DbType="Decimal(10,2) NOT NULL")]
		public decimal Budget
		{
			get
			{
				return this._Budget;
			}
			set
			{
				if ((this._Budget != value))
				{
					this.OnBudgetChanging(value);
					this.SendPropertyChanging();
					this._Budget = value;
					this.SendPropertyChanged("Budget");
					this.OnBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_OtherCost", Storage="_OtherCosts", ThisKey="TripID", OtherKey="TripID")]
		public EntitySet<OtherCost> OtherCosts
		{
			get
			{
				return this._OtherCosts;
			}
			set
			{
				this._OtherCosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Stayment", Storage="_Stayments", ThisKey="TripID", OtherKey="TripID")]
		public EntitySet<Stayment> Stayments
		{
			get
			{
				return this._Stayments;
			}
			set
			{
				this._Stayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Transport", Storage="_Transports", ThisKey="TripID", OtherKey="TripID")]
		public EntitySet<Transport> Transports
		{
			get
			{
				return this._Transports;
			}
			set
			{
				this._Transports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Trip", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OtherCosts(OtherCost entity)
		{
			this.SendPropertyChanging();
			entity.Trip = this;
		}
		
		private void detach_OtherCosts(OtherCost entity)
		{
			this.SendPropertyChanging();
			entity.Trip = null;
		}
		
		private void attach_Stayments(Stayment entity)
		{
			this.SendPropertyChanging();
			entity.Trip = this;
		}
		
		private void detach_Stayments(Stayment entity)
		{
			this.SendPropertyChanging();
			entity.Trip = null;
		}
		
		private void attach_Transports(Transport entity)
		{
			this.SendPropertyChanging();
			entity.Trip = this;
		}
		
		private void detach_Transports(Transport entity)
		{
			this.SendPropertyChanging();
			entity.Trip = null;
		}
	}
}
#pragma warning restore 1591
